package com.project.demo.config;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import static com.example.demo.data.PathConstantData.API_PUBLIC_ALL;
import static com.example.demo.data.PathConstantData.API_VUE;
import static com.example.demo.data.PathConstantData.API_DNS;

@Configuration
public class SecurityConfig {

    /**
     * Spring Security 的主要設定，定義 HttpSecurity 行為。
     */
    @Bean
    SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // 關閉 CSRF 保護，通常 REST API 使用 Token 時會關閉
            .csrf(csrf -> csrf.disable())
            
            // 啟用 CORS 支援，但此處不直接設定，使用 corsConfigurationSource() Bean 提供設定
            .cors(cors -> {})
            
            // 設定授權規則
            .authorizeHttpRequests(auth -> auth
                // 允許指定路徑的資源不需驗證
                .requestMatchers(API_PUBLIC_ALL).permitAll()
                // 其他所有請求都需身份驗證
                .anyRequest().authenticated()
            );
        return http.build();
    }

    /**
     * CORS 設定來源，定義允許跨域的規則。
     * Spring Security 會使用這個設定來處理跨域請求。
     */
    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        
        // 設定允許的來源（前端網址）
        config.setAllowedOrigins(List.of(
            API_VUE, // 本地開發前端
            API_DNS  // 正式網站域名
        ));
        
        // 允許的 HTTP 方法
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        
        // 允許的請求標頭，* 表示允許所有標頭
        config.setAllowedHeaders(List.of("*"));
        
        // 允許傳送 Cookie 或授權資訊（如 Authorization header）
        config.setAllowCredentials(true);
        
        // 預先請求快取的秒數，減少瀏覽器發送 OPTIONS 請求頻率
        config.setMaxAge(3600L);

        // 使用 URL 路徑為基礎的 CORS 配置來源
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        
        // 註冊上面設定的 CORS 規則給所有路徑
        source.registerCorsConfiguration("/**", config);
        
        return source;
    }
}

